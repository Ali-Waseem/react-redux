import { configureStore } from '@reduxjs/toolkit';
// import { createStore } from 'redux';
import counterSlice from './counter'; // Importing the counter slice
import authSlice from './auth'; // Importing the auth slice






// Using Redux Toolkit's createSlice is a more modern and easier approach, but here we stick to the original Redux syntax just for understanding
//You neet to create a reducer function to handle actions and update the state accordingly.
// const counterReduce = (state = initialCounterState, action) => {
//     if (action.type === 'INCREMENT') {
//         return {
//             counter: state.counter + (action.amount || 1),
//             showCounter: state.showCounter
//         };
//     }

//     if (action.type === 'DECREMENT') {
//         return {
//             counter: state.counter - (action.amount || 1),
//             showCounter: state.showCounter
//         };
//     }

//     if (action.type === 'TOGGLE') {
//         return {
//             counter: state.counter,
//             showCounter: !state.showCounter
//         };
//     }

//     return state;
// }



// FOR REDUX TOOLKIT WE REGISTER THE SLICE REDUCER
const store = configureStore({
    
    // reducer: counterSlice.reducer // SINGLE REDUCER CAN BE USED DIRECTLY HOWEVER IF WE HAVE MULTIPLE REDUCERS WE CAN USE AN OBJECT AS SHOWN BELOW

    reducer:{ 
        // THIS IS THE SANTAX IF WE HAVE MULTIPLE REDUCERS
        counterReducer: counterSlice.reducer,
        authReducer: authSlice.reducer
    }
});

// FOR REDUX TOOLKIT WE REGISTER THE SLICE REDUCER
// const store = createStore(counterReduce);



// THIS WILL GIVE US THE ACTION CREATORS GENERATED BY createSlice
const counterActions = counterSlice.actions;
const authActions = authSlice.actions;

export { counterActions, authActions }; // EXPORTING THE ACTIONS TO USE IN COMPONENTS
export default store;